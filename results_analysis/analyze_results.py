from analysis_functions import *
import matplotlib.pyplot as plt

num_stops=70

#ask user for path to results csv generated by HTTP server code
csv_file_path = get_csv_file()
#csv_file_path="fake_results.csv"

#ask user for test ID, should be 1st column of results csv
test_ID=input("Enter test ID: ")
#test_ID="1731956299"

#lists to store timestamps
departure_times=[]
LIC_times=[]
arrival_times=[]

#list to store grid characters, 'X' is a success, 'O' is a fail, and 'E' is an error
grid_chars=[]

try:
    #open results csv
    with open(csv_file_path, mode='r', newline='', encoding='utf-8') as file:
        reader = csv.reader(file)
        
        #Skip the header row
        headers = next(reader, None)
        print("Headers:", headers)
        
        # Read each row
        for row in reader:

            # add LIC timestamp regardless of test id bc LIC arduino doesn't know what test it's doing
            if row[5]=='N/A':
                    LIC_times.append(int(row[3]))

            # add arrival/departure times for specified test id
            if row[0]==test_ID:
                print(row)
                if row[5]=='arrive' and row[4] != '0':      #ignore the first arrival, with stop num 0
                    arrival_times.append(int(row[3]))
                if row[5]=='depart':
                    departure_times.append(int(row[3]))
        
    
    #check that all arrivals and departures are present, ie check that the robot completed the course
    if (len(departure_times)!=num_stops or len(arrival_times)!=num_stops):
        print(f"Error: Stops missing, only {len(departure_times)} departures and {len(arrival_times)} arrivals.")
        exit()

    #go through timestamp lists and generate grid chars array
    for stop_num in range(num_stops):
        append_char='O'
        for LIC_time in LIC_times:  
            if (departure_times[stop_num]<LIC_time<arrival_times[stop_num]):
                append_char='X'
        grid_chars.append(append_char)
    print(grid_chars)

    #save results grid as csv
    col_1_num=9
    col_2_num=10
    f=open("results_grid.csv","w")
    for x in range(10):
        f.write(grid_chars[col_1_num]+","+grid_chars[col_2_num]+","+grid_chars[col_1_num+20]+","+grid_chars[col_2_num+20]+","+grid_chars[col_1_num+40]+"\n")
        col_1_num-=1
        col_2_num+=1
    f.close()

    #save results grid as png

    # output grid image dimensions
    rows, cols = 10, 5
    cell_width, cell_height = 1, 1

    # Create the grid
    fig, ax = plt.subplots(figsize=(cols * cell_width, rows * cell_height))
    # Draw the grid
    for row in range(rows + 1):
        ax.axhline(y=row, color='black', linewidth=0.5)
    for col in range(cols + 1):
        ax.axvline(x=col, color='black', linewidth=0.5)

    # Add 'X' and 'O' in cells
    for row in range(rows):
        for col in range(cols):
            if col%2==0:
                grid_number=(10*col)+9-row
            else:
                grid_number=(10*col)+row
            
            char = grid_chars[grid_number]
            ax.text(col + 0.5, rows - row - 0.5, char, ha='center', va='center', fontsize=12)
    
    # Add title
    title="LIC 1 Output Grid, Left Half"
    fig.suptitle(title, fontsize=16, weight='bold', y=0.95)

    # Add 'START' label in the bottom left cell
    ax.text(0.5, 0.1, "START", ha='center', va='bottom', fontsize=12, weight='bold')

    # Adjust the plot
    expansion_constant=0.01
    ax.set_xlim(-expansion_constant, cols + expansion_constant)  # Expand limits slightly to ensure visibility
    ax.set_ylim(-expansion_constant, rows + expansion_constant)
    ax.set_aspect('equal')
    ax.axis('off')  # Hide axes

    # Save the image
    output_path = "output_grid.png"
    plt.savefig(output_path, bbox_inches='tight', dpi=300)

    # Display the grid
    plt.show()


except FileNotFoundError:
    print(f"Error: The file '{csv_file_path}' does not exist.")
except Exception as e:
    print(f"An error occurred: {e}")